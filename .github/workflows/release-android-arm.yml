name: Build and Release android-arm

# NOTE: This Github Actions file depends on the Makefile.
#       Building the correct package requires the correct binaries generated by the Makefile. To 
#       ensure the correct output, the Makefile must accept the appropriate input and compile the 
#       correct file with the correct name. If you need to modify this file, please ensure it won't 
#       disrupt the Makefile.

on:
  workflow_dispatch:
  release:
    types: [published]
  push:
    branches:
      - main
    paths:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/release-android-arm.yml"
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/release-android-arm.yml"

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Restore Cache
        uses: actions/cache/restore@v4
        with:
          path: resources
          key: xray-geodat-
          restore-keys: |
            xray-geodat-

      - name: Update Geodat
        id: update
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 60
          retry_wait_seconds: 60
          max_attempts: 60
          command: |
            [ -d 'resources' ] || mkdir resources
            LIST=('geoip geoip geoip' 'domain-list-community dlc geosite')
            for i in "${LIST[@]}"
            do
              INFO=($(echo $i | awk 'BEGIN{FS=" ";OFS=" "} {print $1,$2,$3}'))
              FILE_NAME="${INFO[2]}.dat"
              echo -e "Verifying HASH key..."
              HASH="$(curl -sL "https://raw.githubusercontent.com/v2fly/${INFO[0]}/release/${INFO[1]}.dat.sha256sum" | awk -F ' ' '{print $1}')"
              if [ -s "./resources/${FILE_NAME}" ] && [ "$(sha256sum "./resources/${FILE_NAME}" | awk -F ' ' '{print $1}')" == "${HASH}" ]; then
                  continue
              else
                  echo -e "Downloading https://raw.githubusercontent.com/v2fly/${INFO[0]}/release/${INFO[1]}.dat..."
                  curl -L "https://raw.githubusercontent.com/v2fly/${INFO[0]}/release/${INFO[1]}.dat" -o ./resources/${FILE_NAME}
                  echo -e "Verifying HASH key..."
                  [ "$(sha256sum "./resources/${FILE_NAME}" | awk -F ' ' '{print $1}')" == "${HASH}" ] || { echo -e "The HASH key of ${FILE_NAME} does not match cloud one."; exit 1; }
                  echo "unhit=true" >> $GITHUB_OUTPUT
              fi
            done

            printenv

      - name: Save Cache
        uses: actions/cache/save@v4
        if: ${{ steps.update.outputs.unhit }}
        with:
          path: resources
          key: xray-geodat-${{ github.sha }}-${{ github.run_number }}

  build:
    needs: prepare
    permissions:
      contents: write
    strategy:
      fail-fast: false

    runs-on: ubuntu-latest

    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.gotoolchain || '1.23' }}
          check-latest: true

      - name: Get project dependencies
        run: go mod download

      - name: Setup NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r26d
          add-to-path: false
          local-cache: true

      - name: Build Xray arm
        run: |
          BASE_NDK_PATH=${{ steps.setup-ndk.outputs.ndk-path }}
          ABI_PATH="$BASE_NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi26-clang"
          echo "Base NDK path: $BASE_NDK_PATH"
          echo "Using Android ABI path: $ABI_PATH"

          GOOS=android GOARCH=arm CGO_ENABLED=1 CC=$ABI_PATH go build -v -o xray -trimpath -ldflags "-s -w -buildid=" ./main

          mkdir -p build_assets
          find . -maxdepth 1 -type f -regex './\(wxray\|xray\|xray_softfloat\)\(\|.exe\)' -exec mv {} ./build_assets/ \;

          echo "ASSET_NAME=android-arm" >> $GITHUB_ENV

      - name: Generate Xray version string
        run: |
          VER=$(date +'v%y.%-m.%-d')
          echo "Xray version for release: $VER"
          echo "XRAY_VERSION=$VER" >> $GITHUB_ENV

      - name: Restore Cache
        uses: actions/cache/restore@v4
        with:
          path: resources
          key: xray-geodat-
          restore-keys: |
            xray-geodat-

      - name: Copy README.md & LICENSE
        run: |
          mv -f resources/* build_assets
          cp ${GITHUB_WORKSPACE}/README.md ./build_assets/README.md
          cp ${GITHUB_WORKSPACE}/LICENSE ./build_assets/LICENSE

      - name: Create ZIP archive
        if: github.event_name == 'release'
        shell: bash
        run: |
          pushd build_assets || exit 1
          touch -mt $(date +%Y01010000) *
          zip -9vr ../Xray-${{ env.ASSET_NAME }}.zip .
          popd || exit 1
          FILE=./Xray-${{ env.ASSET_NAME }}.zip
          DGST=$FILE.dgst
          for METHOD in {"md5","sha1","sha256","sha512"}
          do
            openssl dgst -$METHOD $FILE | sed 's/([^)]*)//g' >>$DGST
          done

      - name: Change the name
        run: |
          mv build_assets Xray-${{ env.ASSET_NAME }}

      - name: Upload files to Artifacts
        uses: actions/upload-artifact@v4
        if: ${{ !env.ACT }} # jwt token needed (see https://github.com/nektos/act/issues/2135)
        with:
          name: Xray-${{ env.ASSET_NAME }}
          path: |
            ./Xray-${{ env.ASSET_NAME }}/*

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        if: github.event_name == 'release'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./Xray-${{ env.ASSET_NAME }}.zip*
          tag: ${{ env.XRAY_VERSION }}
          overwrite: true
          file_glob: true
